


// low
for(i=0;i<SIZE_OF_BUFFER;i++){
wLow[writeIndex] = buffer[writeIndex] - (low[(writeIndex+i) % SIZE_OF_BUFFER] * aLow[SIZE_OF_BUFFER - i]);
wMid[writeIndex] = buffer[writeIndex] - (mid[(writeIndex+i) % SIZE_OF_BUFFER] * aMid[SIZE_OF_BUFFER - i]);
wPres[writeIndex] = buffer[writeIndex] - (pres[(writeIndex+i) % SIZE_OF_BUFFER] * aPres[SIZE_OF_BUFFER - i]);
wHigh[writeIndex] = buffer[writeIndex] - (high[(writeIndex+i) % SIZE_OF_BUFFER] * aHigh[SIZE_OF_BUFFER - i]);
}
for(i=0;i<SIZE_OF_BUFFER;i++){
low[writeIndex] += (wLow[(writeIndex+i) % SIZE_OF_BUFFER] * bLow[SIZE_OF_BUFFER - i]);
mid[writeIndex] += (wMid[(writeIndex+i) % SIZE_OF_BUFFER] * bMid[SIZE_OF_BUFFER - i]);
pres[writeIndex] += (wPres[(writeIndex+i) % SIZE_OF_BUFFER] * bPres[SIZE_OF_BUFFER - i]);
high[writeIndex] += (wHigh[(writeIndex+i) % SIZE_OF_BUFFER] * bHigh[SIZE_OF_BUFFER - i]);
}

eqSignal[writeIndex] = low[writeIndex] + mid[writeIndex] + pres[writeIndex] + high[writeIndex];


// implement distortion algorithm
if(dist){
	// shift audio file for asymmetry
	buffer[writeIndex] = (gain*s16)+0.5;
	// gain stage 1
	if(buffer[writeIndex] > 2/3 || buffer[writeIndex] < -2/3){
	buffer[writeIndex] = buffer[writeIndex]/(4*gain);
	}
}






s16 = read_audio_sample(); // get current input sample
// cycle to next number in buffer
writeIndex = (writeIndex + SIZE_OF_BUFFER - 1) % SIZE_OF_BUFFER;

// implement distortion algorithm
if(dist){
	// shift audio file for asymmetry
	buffer[writeIndex] = (gain*s16)+0.5;
	// gain stage 1
	if(buffer[writeIndex] > 2/3 || buffer[writeIndex] < -2/3){
	buffer[writeIndex] = buffer[writeIndex]/(4*gain);
	}
}

// processing
outputSample = buffer[writeIndex];
write_audio_sample(outputSample); // output audio



for(i=0;i<SIZE_OF_BUFFER;i++){
	signal += (eqSignal[(writeIndex+i) % SIZE_OF_BUFFER] * filter[SIZE_OF_BUFFER - i]);
	}

for(i=0;i<6;i++){
wLow[writeIndex] = (low[(writeIndex+i) % 6] * aLow[6 - i]);
}
wLow[writeIndex] = buffer[writeIndex] - wLow[writeIndex];

for(i=0;i<6;i++){
	low[writeIndex] += (wLow[(writeIndex+i) % 6] * bLow[6 - i]);
}

